package talonos.biomescanner.map;

public class BiomeMapColors {

    public static int[] colors = new int[256];
    public static int[] biomeLookup = new int[256];

    public static void initColors() {
        for (int x = 0; x < 256; x++) {
            biomeLookup[x] = 48; // Confused.
        }

        // The following code autogenerated by Excel.

        biomeLookup[0] = 0; // For Ocean biome.
        biomeLookup[1] = 1; // For Plains biome.
        biomeLookup[2] = 2; // For Desert biome.
        biomeLookup[3] = 6; // For Extreme Hills biome.
        biomeLookup[4] = 8; // For Forest biome.
        biomeLookup[5] = 9; // For Taiga biome.
        biomeLookup[6] = 10; // For Swampland biome.
        biomeLookup[7] = 11; // For River biome.
        biomeLookup[8] = 12; // For Hell biome.
        biomeLookup[9] = -1; // For Sky biome.
        biomeLookup[10] = 13; // For FrozenOcean biome.
        biomeLookup[11] = 13; // For FrozenRiver biome.
        biomeLookup[12] = 14; // For Ice Plains biome.
        biomeLookup[13] = 15; // For Ice Mountains biome.
        biomeLookup[14] = 16; // For MushroomIsland biome.
        biomeLookup[15] = 17; // For MushroomIslandShore biome.
        biomeLookup[16] = 18; // For Beach biome.
        biomeLookup[17] = 19; // For DesertHills biome.
        biomeLookup[18] = 20; // For ForestHills biome.
        biomeLookup[19] = 21; // For TaigaHills biome.
        biomeLookup[20] = 3; // For Extreme Hills Edge biome.
        biomeLookup[21] = 22; // For Jungle biome.
        biomeLookup[22] = 23; // For JungleHills biome.
        biomeLookup[23] = 51; // For JungleHills biome.
        biomeLookup[27] = 52; // For BirchForest.
        biomeLookup[28] = 20; // For BirchForest hills.
        biomeLookup[132] = 52; // For FlowerForest.
        biomeLookup[45] = 24; // For MSDune biome.
        biomeLookup[46] = 26; // For MSLakeshore2 biome.
        biomeLookup[47] = 28; // For MSGravelBch biome.
        biomeLookup[48] = 5; // For MSExtreme Hills2 biome.
        biomeLookup[49] = 4; // For MSExtreme Hills Edge2 biome.
        biomeLookup[50] = 7; // For MSPeak biome.
        biomeLookup[51] = 29; // For MSTheArctic biome.
        biomeLookup[52] = 31; // For MSMonumentRocks biome.
        biomeLookup[53] = 32; // For MSMonumentRocksPeak biome.
        biomeLookup[54] = 30; // For MSMonumentValley biome.
        biomeLookup[55] = 33; // For MSMonumentRocksBorder biome.
        biomeLookup[56] = 34; // For MSErodedCoast biome.
        biomeLookup[57] = 31; // For MSMonumentArches biome.
        biomeLookup[58] = 33; // For MSMonumentRocksLowerPeak biome.
        biomeLookup[59] = 33; // For MSMonumentArchesLower biome.
        biomeLookup[60] = 34; // For MSMonumentArchesRvr biome.
        biomeLookup[61] = 33; // For MSMonumentArchesLowerRvr biome.
        biomeLookup[62] = 31; // For MSMonumentArchesMediumRvr biome.
        biomeLookup[63] = 35; // For MSLava biome.
        biomeLookup[64] = 36; // For MSWesterwald biome.
        biomeLookup[65] = 38; // For MSFloatingCity biome.
        biomeLookup[66] = 37; // For MSFloatingCityCenter biome.
        biomeLookup[67] = 41; // For MSFloatingCityBorder biome.
        biomeLookup[68] = 40; // For MSFloatingCityBorder2 biome.
        biomeLookup[69] = 39; // For MSFloatingCityBorder3 biome.
        biomeLookup[70] = 42; // For MSColdlava biome.
        biomeLookup[71] = 43; // For MSVulcano biome.
        biomeLookup[72] = 44; // For MSBryce biome.
        biomeLookup[73] = 45; // For MSGrassland biome.
        biomeLookup[74] = 25; // For MSLakeshore biome.
        biomeLookup[75] = 27; // For MSLakes biome.
        biomeLookup[76] = 7; // For MSSummits biome.
        biomeLookup[77] = 0; // For OceanInBorder biome.
        biomeLookup[78] = 2; // For Dsrt biome.
        biomeLookup[79] = 19; // For DsrtHills biome.
        biomeLookup[80] = 18; // For Bch biome.
        biomeLookup[81] = 0; // For OceanRich biome.
        biomeLookup[82] = 11; // For Rvr biome.
        biomeLookup[83] = 49; // For TAJungleNetherrack
        biomeLookup[194] = 46; // For Eerie biome.
        biomeLookup[193] = 47; // For MagicForest biome.
        biomeLookup[140] = 50; // For MagicForest biome.
        biomeLookup[35] = 53; // For MagicForest biome.
        biomeLookup[36] = 54; // For MagicForest biome.

        colors[0] = 0x3333ff; // For Ocean
        colors[1] = 0xb8cc52; // For Savannah
        colors[2] = 0xffcc33; // For Desert
        colors[3] = 0x6b5816; // For Extreme Hills 1
        colors[4] = 0x836e26; // For Extreme Hills 2
        colors[5] = 0x9d873c; // For Extreme Hills 3
        colors[6] = 0xbaa458; // For Extreme Hills 4
        colors[7] = 0xd4c079; // For Summit
        colors[8] = 0x26c826; // For Forest
        colors[9] = 0x007700; // For Taigia
        colors[10] = 0x73994c; // For Swamp
        colors[11] = 0x00cccc; // For River
        colors[12] = 0x999977; // For Hell
        colors[13] = 0xa8fffa; // For Frozen Water
        colors[14] = 0xcccccc; // For Tundra
        colors[15] = 0xaaaaaa; // For Tundra Mountain
        colors[16] = 0x8e51bd; // For Mushroom
        colors[17] = 0x956fb2; // For Mushroom shore
        colors[18] = 0xffff00; // For Beach
        colors[19] = 0xc9a128; // For Desert hills
        colors[20] = 0x009900; // For Forest hills
        colors[21] = 0x003333; // For Taiga Hills
        colors[22] = 0x189d28; // For Jungle
        colors[23] = 0x0e6818; // For Jungle hills
        colors[24] = 0xe1bb4a; // For Dunes
        colors[25] = 0x7e9d3c; // For Lakeshore
        colors[26] = 0xa8c765; // For Lakeshore 2
        colors[27] = 0x009e9e; // For Mountain Lake
        colors[28] = 0x777777; // For Gravel Beach
        colors[29] = 0x00eecc; // For Iceberg
        colors[30] = 0xccaa22; // For Monument Valley
        colors[31] = 0x806a16; // For Med arches
        colors[32] = 0x4d400d; // For High arches
        colors[33] = 0x99801a; // For Low Arches
        colors[34] = 0xbec826; // For Eroded Coast
        colors[35] = 0xff6499; // For Lava
        colors[36] = 0x7ec826; // For Pillar Forest
        colors[37] = 0x006e68; // For Floating city center
        colors[38] = 0x00a198; // For Floating City
        colors[39] = 0x00877f; // For Floating City
        colors[40] = 0x00baaf; // For Floating City
        colors[41] = 0x00e4d7; // For Floating City edge
        colors[42] = 0x999977; // For Cold Lava
        colors[43] = 0xff0000; // For Volcano
        colors[44] = 0x84881b; // For Bryce
        colors[45] = 0x99ff00; // For Grassland
        colors[46] = 0x442222; // For Eerie
        colors[47] = 0x11ffb3; // For Magic Forest
        colors[48] = 0xea00ff; // For Confused
        colors[49] = 0x087d18; // For Netherrack Jungle
        colors[50] = 0x98efea; // For Ice Spires
        colors[51] = 0x98efea; // For Jungle Border
        colors[52] = 0x36b836; // For Birch and flower Forest
        colors[53] = 0xc8cc42; // For Savannah
        colors[54] = 0xa8ac32; // For Savannah Plateau

        for (int x = 0; x < 54; x++) {
            colors[x + 64] = halveColor(colors[x]);
        }
    }

    private static int halveColor(int i) {
        int r = i >> 16;
        int g = (i & 0x00ff00) >> 8;
        int b = (i & 0x0000ff);
        r /= 2;
        g /= 2;
        b /= 2;
        return (r << 16) + (g << 8) + (b);
    }

    public static double FLASH_DIVISOR = 6;

    public static void updateFlash(long worldTime) {
        double sinish = (Math.sin((double) worldTime / FLASH_DIVISOR) + 1.0) / 2.0;
        for (int x = 0; x < 54; x++) {
            colors[x + 128] = addRed(colors[x], sinish);
        }
        for (int x = 0; x < 54; x++) {
            colors[x + 192] = halveColor(colors[x + 64]);
        }
        // System.out.println("in: "+colors[6]+", out: "+colors[6+128]);
    }

    private static int addRed(int i, double sinish) {
        int r = i >> 16;
        int g = (i & 0x00ff00) >> 8;
        int b = (i & 0x0000ff);

        int newr = 255;
        int newg = 0;
        int newb = 150;

        r = (int) ((double) r * (1.0 - sinish) + newr * sinish);
        g = (int) ((double) g * (1.0 - sinish) + newg * sinish);
        b = (int) ((double) b * (1.0 - sinish) + newb * sinish);
        return (r << 16) + (g << 8) + (b);
    }
}
